/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin;

import config.Session;
import config.dbConnector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author milan
 */
public class DepositApproval extends javax.swing.JFrame {

    /**
     * Creates new form LoanApproval
     */
    public DepositApproval() {
        initComponents();
        
          loadPendingDeposits();
    }
    
   public void loadPendingDeposits() {
    DefaultTableModel model = (DefaultTableModel) deposittbl.getModel();
    model.setRowCount(0); // clear

    try {
        dbConnector dbc = new dbConnector();
        String sql = "SELECT * FROM tbl_deposits WHERE status = 'PENDING'";
        try (Connection conn = dbc.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("deposit_id"),
                    rs.getString("u_username"),
                    rs.getDouble("amount"),
                    rs.getString("transaction_description"),
                    rs.getTimestamp("transaction_date"),
                    rs.getString("status")
                });
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
}

  
     public void logEvent(int userId, String username, String description) {
    dbConnector dbc = new dbConnector();
    Connection con = dbc.getConnection();
    PreparedStatement pstmt = null;

    try {
        // Fixed: include `log_description` in your INSERT
        String sql = "INSERT INTO tbl_log (u_id, u_username, login_time, u_type, log_status, log_description) VALUES (?, ?, ?, ?, ?, ?)";
        pstmt = con.prepareStatement(sql);

        pstmt.setInt(1, userId);
        pstmt.setString(2, username);
        pstmt.setTimestamp(3, new Timestamp(new Date().getTime())); 
        pstmt.setString(4, "Success - User Action"); 
        pstmt.setString(5, "Active"); 
        pstmt.setString(6, description);

        pstmt.executeUpdate();
        System.out.println("Log event recorded successfully.");
    } catch (SQLException e) {
        System.out.println("Error recording log: " + e.getMessage());
    } finally {
        try {
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error closing resources: " + e.getMessage());
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deposittbl = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        cancel1 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 40, 590));

        jLabel1.setFont(new java.awt.Font("Yu Gothic Light", 1, 36)); // NOI18N
        jLabel1.setText("DEPOSIT APPROVAL");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, -1, -1));

        deposittbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "deposit_id", "u_username", "Amount", "Transaction_description", "Transaction Date", "Status"
            }
        ));
        jScrollPane1.setViewportView(deposittbl);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 640, 410));

        jButton1.setText("Approve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, -1, -1));

        jButton2.setText("Reject");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 80, -1));

        area.setColumns(20);
        area.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        area.setRows(5);
        jScrollPane2.setViewportView(area);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 220, 240, 230));

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Reset");
        jButton4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 460, 80, 40));

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Print Receipt");
        jButton5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 460, 110, 40));

        cancel1.setBackground(new java.awt.Color(255, 0, 0));
        cancel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        cancel1.setForeground(new java.awt.Color(27, 57, 77));
        cancel1.setText("Cancel");
        cancel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancel1MouseClicked(evt);
            }
        });
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });
        jPanel1.add(cancel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 20, 170, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 590));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
int selectedRow = deposittbl.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a deposit to approve.");
        return;
    }

    int depositId = (int) deposittbl.getValueAt(selectedRow, 0);
    String username = deposittbl.getValueAt(selectedRow, 1).toString();
    double depositAmount = Double.parseDouble(deposittbl.getValueAt(selectedRow, 2).toString());
    String currentStatus = deposittbl.getValueAt(selectedRow, 5).toString();

    if ("APPROVED".equals(currentStatus) || "REJECTED".equals(currentStatus)) {
        JOptionPane.showMessageDialog(null, "This deposit has already been processed.");
        return;
    }

    // Get teller session
    Session sess = Session.getInstance();
    int tellerId = sess.getUid();
    String tellerUsername = sess.getUsername();

    if (tellerId == -1) {
        JOptionPane.showMessageDialog(null, "Teller not logged in!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    dbConnector dbc = new dbConnector();
    Connection conn = null;
    PreparedStatement pstDepositUpdate = null;
    PreparedStatement pstBalanceUpdate = null;

    try {
        conn = dbc.getConnection();
        conn.setAutoCommit(false); // Begin transaction

        // 1. Approve deposit
        String sqlDepositUpdate = "UPDATE tbl_deposits SET status = 'APPROVED', approved_by = ?, approved_at = CURRENT_TIMESTAMP WHERE deposit_id = ? AND status = 'PENDING'";
        pstDepositUpdate = conn.prepareStatement(sqlDepositUpdate);
        pstDepositUpdate.setInt(1, tellerId);
        pstDepositUpdate.setInt(2, depositId);
        int depositUpdateResult = pstDepositUpdate.executeUpdate();

        if (depositUpdateResult > 0) {
            // 2. Get current balance
            String getBalanceQuery = "SELECT balance FROM tbl_users WHERE u_username = ?";
            pstBalanceUpdate = conn.prepareStatement(getBalanceQuery);
            pstBalanceUpdate.setString(1, username);
            ResultSet rsBalance = pstBalanceUpdate.executeQuery();

            double currentBalance = 0.0;
            if (rsBalance.next()) {
                currentBalance = rsBalance.getDouble("balance");
            } else {
                JOptionPane.showMessageDialog(null, "User not found.");
                conn.rollback();
                return;
            }

            // 3. Update balance
            double newBalance = currentBalance + depositAmount;
            String updateBalanceQuery = "UPDATE tbl_users SET balance = ? WHERE u_username = ?";
            pstBalanceUpdate = conn.prepareStatement(updateBalanceQuery);
            pstBalanceUpdate.setDouble(1, newBalance);
            pstBalanceUpdate.setString(2, username);
            int balanceUpdateResult = pstBalanceUpdate.executeUpdate();

            if (balanceUpdateResult > 0) {
                conn.commit();
                JOptionPane.showMessageDialog(null, "Deposit Approved and Balance Updated.");

                // Log event
                String description = "Teller approved Deposit ID: " + depositId + " for user " + username;
                logEvent(tellerId, tellerUsername, description);

                // Refresh table
                loadPendingDeposits();

                // Print receipt
                area.setText("");
                area.append("*********************************************\n");
                area.append("*        Money Remittance's Receipt System  *\n");
                area.append("*********************************************\n\n");
                area.append(new Date().toString() + "\n\n");
                area.append("User's Username: " + username + "\n");
                area.append("Deposit Amount: ₱" + depositAmount + "\n");

            } else {
                conn.rollback();
                JOptionPane.showMessageDialog(null, "Error updating balance.");
            }

        } else {
            conn.rollback();
            JOptionPane.showMessageDialog(null, "Deposit approval failed.");
        }

    } catch (Exception e) {
        try {
            if (conn != null) conn.rollback();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Rollback failed: " + ex.getMessage());
        }
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
    } finally {
        try {
            if (pstDepositUpdate != null) pstDepositUpdate.close();
            if (pstBalanceUpdate != null) pstBalanceUpdate.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error closing resources: " + e.getMessage());
        }
    }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            int selectedRow = deposittbl.getSelectedRow();

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Please select a deposit request to reject.");
                return;
            }

            int depositId = (int) deposittbl.getValueAt(selectedRow, 0); // Column 0 is Deposit ID

            // Get teller session details
            Session sess = Session.getInstance();
            int tellerId = sess.getUid();
            String tellerUsername = sess.getUsername();

            // Validate teller session
            if (tellerId == -1) {
                JOptionPane.showMessageDialog(null, "Teller not logged in!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                dbConnector dbc = new dbConnector();
                String sql = "UPDATE tbl_deposits SET status = 'REJECTED', approved_by = ?, approved_at = CURRENT_TIMESTAMP WHERE transaction_id = ?";
                try (Connection conn = dbc.getConnection();
                     PreparedStatement pst = conn.prepareStatement(sql)) {

                    pst.setInt(1, tellerId);
                    pst.setInt(2, depositId);

                    int result = pst.executeUpdate();

                    if (result > 0) {
                        JOptionPane.showMessageDialog(null, "Deposit Rejected.");

                        // Log the rejection
                        String description = "Teller rejected Deposit ID: " + depositId;
                        logEvent(tellerId, tellerUsername, description);

                        loadPendingDeposits(); // refresh deposit table
                    } else {
                        JOptionPane.showMessageDialog(null, "Deposit rejection failed.");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            }
        }
    });    // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       // area.setText("");
        //username.setText("");
        //loanamount.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try{
            area.print();
        }catch(Exception e){
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void cancel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cancel1MouseClicked

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed

        Admindashboard ru = new Admindashboard();
        ru.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cancel1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DepositApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DepositApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DepositApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DepositApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DepositApproval().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea area;
    public javax.swing.JButton cancel1;
    private javax.swing.JTable deposittbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    public javax.swing.JButton jButton4;
    public javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
